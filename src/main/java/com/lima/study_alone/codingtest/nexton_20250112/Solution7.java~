package com.lima.study_alone.codingtest.nexton_20250112;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.Deque;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;

public class Solution7 {

//  public static long teamFormation(List<Integer> score, int team_size, int k) {
//    // Create a mutable list to work with
//    List<Integer> workingList = new ArrayList<>(score);
//    long totalScore = 0;
//
//    // Continue until we have selected team_size members
//    for (int i = 0; i < team_size; i++) {
//      // Determine the ranges to look at
//      int frontEndIndex = Math.min(k, workingList.size());
//      int backStartIndex = Math.max(0, workingList.size() - k);
//
//      // Get maximum score from front k elements
//      int maxFront = Integer.MIN_VALUE;
//      int maxFrontIndex = -1;
//      for (int j = 0; j < frontEndIndex; j++) {
//        if (workingList.get(j) > maxFront) {
//          maxFront = workingList.get(j);
//          maxFrontIndex = j;
//        }
//      }
//
//      // Get maximum score from last k elements
//      int maxBack = Integer.MIN_VALUE;
//      int maxBackIndex = -1;
//      for (int j = backStartIndex; j < workingList.size(); j++) {
//        if (workingList.get(j) > maxBack) {
//          maxBack = workingList.get(j);
//          maxBackIndex = j;
//        }
//      }
//
//      // Select the employee with the highest score
//      // If scores are equal, take the one with lower index
//      int selectedScore;
//      int selectedIndex;
//      if (maxFront >= maxBack) {
//        selectedScore = maxFront;
//        selectedIndex = maxFrontIndex;
//      } else {
//        selectedScore = maxBack;
//        selectedIndex = maxBackIndex;
//      }
//
//      // Add the selected score to total
//      totalScore += selectedScore;
//
//      // Remove the selected employee from the working list
//      workingList.remove(selectedIndex);
//    }
//
//    return totalScore;
//  }

  public static long teamFormation(List<Integer> score, int team_size, int k) {
    int n = score.size();
    long totalScore = 0;

    // 양쪽에서 빠른 접근이 가능한 Deque 생성
    Deque<int[]> deque = new ArrayDeque<>(n);

    // 초기 데이터 로드 ([인덱스, 값] 형태로 저장)
    for (int i = 0; i < n; i++) {
      deque.add(new int[]{i, score.get(i)});
    }

    // 선택된 값들의 인덱스를 저장
    BitSet selected = new BitSet(n);

    while (team_size > 0 && !deque.isEmpty()) {
      int frontMax = Integer.MIN_VALUE;
      int backMax = Integer.MIN_VALUE;
      int frontMaxIdx = -1;
      int backMaxIdx = -1;

      // 앞에서 k개 검사를 위한 임시 저장소
      Deque<int[]> frontTemp = new ArrayDeque<>(k);
      int frontCount = 0;

      // 앞쪽 k개 중 최대값 찾기
      while (!deque.isEmpty() && frontCount < k) {
        int[] curr = deque.pollFirst();
        if (!selected.get(curr[0])) {
          frontTemp.add(curr);
          if (curr[1] > frontMax) {
            frontMax = curr[1];
            frontMaxIdx = curr[0];
          }
          frontCount++;
        }
      }

      // 뒤쪽 k개 중 최대값 찾기
      Deque<int[]> backTemp = new ArrayDeque<>(k);
      int backCount = 0;

      while (!deque.isEmpty() && backCount < k) {
        int[] curr = deque.pollLast();
        if (!selected.get(curr[0])) {
          backTemp.addFirst(curr);
          if (curr[1] > backMax) {
            backMax = curr[1];
            backMaxIdx = curr[0];
          }
          backCount++;
        }
      }

      // 임시 저장소의 값들을 다시 deque에 넣기
      frontTemp.forEach(deque::addFirst);
      backTemp.forEach(deque::addLast);

      // 더 큰 값 선택 (같으면 앞쪽 선택)
      if (frontMax >= backMax) {
        totalScore += frontMax;
        selected.set(frontMaxIdx);
      } else {
        totalScore += backMax;
        selected.set(backMaxIdx);
      }

      team_size--;
    }

    return totalScore;
  }

  public static void main(String[] args) {
    // 예제 1
    List<Integer> score1 = Arrays.asList(17, 12, 10, 2, 7, 2, 11, 20, 8);
    int team_size1 = 3;
    int k1 = 4;
    System.out.println("결과 1: " + teamFormation(score1, team_size1, k1)); // 예상 결과: 49

    // 예제 2
    List<Integer> score2 = Arrays.asList(6, 18, 8, 14, 10, 12, 18, 9);
    int team_size2 = 8;
    int k2 = 3;
    System.out.println("결과 2: " + teamFormation(score2, team_size2, k2)); // 예상 결과: 95

//    List<Integer> score3 = Arrays.asList(411417165, 722001603, 807838443, 462870277, 951960675, 70410128, 746481878, 879374948, 495410585, 708777972, 576689785, 256915770, 987441951, 145410788, 511963791, 223155116, 108340938, 267557829, 398866580, 477639025, 377634128, 33102512, 244117255, 644181522, 438816903, 960581806, 697227688, 825631019, 486514090, 840755707, 341632442, 165790376, 464547731, 462270534, 29022785, 690194696, 811699457, 812831983, 25762373, 823212445, 136398036, 393595720, 680165645, 493051594, 299391563, 215579349, 193318500, 892886083, 406234444, 344225163, 898644183, 347170640, 978942620, 59228691, 497947637, 733606665, 724426786, 801661960, 317189773, 448238234, 200933672, 212026420, 203742450, 97879425, 123593881, 122196183, 933945146, 433884107, 427706180, 338670560, 425087354, 859334746, 808871959, 685206321, 401524747, 247112993, 711929956, 900024542, 791628232, 781431141, 820592158, 542149998, 130698317, 352890878, 201328668, 344863256, 758838841, 728977299, 204816469, 856244487, 187982700, 516431073, 341539362, 844803478, 889822025, 582404340, 91507328, 493817492, 773343989, 840812396, 99478090, 546099841, 888560021, 493093049, 445325442, 452991950, 933506708, 515541599, 289939592, 60292897, 814119898, 183577394, 472673377, 409546126, 418396693, 862292890, 980316401, 397653726, 676570867, 864233936, 753298497, 451510219, 859185510, 936831007, 201188281, 324294722, 156476382, 701779747, 330537062, 128898975, 953350290, 232747533, 88364853, 739566836, 240978871, 967298268, 116015925, 753269057, 465135558, 386345636, 57979353, 865153981, 153128378, 541873099, 383940403, 327596555, 735048527, 400369223, 312486970, 351765125, 754391876, 504948192, 592472836, 948861045, 354085785, 447019124, 266563340, 765289558, 327631313, 767850541, 513761132, 640142359, 611149617, 931319244, 386859812, 526750551, 522136830, 868897506, 925736785, 185808297, 509505219, 693698577, 389278582, 37969105, 310964872, 356884302, 27796918, 56342789, 227017499, 51128866, 526138135, 768741165, 313340490, 672324068, 384461760, 654528803, 959669543, 797110272, 665331515, 259150323, 674588226, 597330482, 516125363, 159881756, 39737842, 990073035, 951020342, 864100812, 82982540, 409393899, 238150644, 33304871, 855734441, 951412932, 384664191, 177324672, 221975396, 553936349, 761433352, 581909661, 784626329, 244049740, 654581415, 656101111, 425278759, 827245562, 283964307, 604750839, 448860974, 328178915, 665612646, 687395130, 376699986, 174435667, 774910810, 495385038, 252972021, 522827049, 7793293, 478274674, 464732032, 320398103, 1388096, 455418841, 221025434, 190353631, 229989396, 293275879, 263715183, 60812695, 878694987, 864038129, 949041898, 327113189, 585611276, 332151809, 139110138, 780309572, 91688863, 106916624, 341515984, 882899773, 472264877, 806005322, 610291487, 950356910, 735650433, 201517389, 785060443, 335623942, 758438985, 500036457, 127827194, 927885702, 870906708, 530402784, 689438645, 978457217, 555411797, 947424807, 432653255, 767376540, 791328926, 219084835, 166438188, 423232526, 724564582, 434107501, 145138403, 764748513, 357048579, 816011918, 803141932, 233544494, 225223728, 507551555, 500983755, 976896868, 995136840, 471887545, 509977666, 498154626, 177948552, 273985233, 66892314, 136553560, 102362704, 238460765, 40431386, 457529290, 31370082, 297072224, 274073486, 397550860, 924644641, 414422610, 325761, 963437542, 741188819, 657192537, 124735490, 907845104, 811565279, 937801361, 86446435, 910595799, 856725775, 168769093, 928258420, 622100118, 543435983, 510311474, 580086476, 446713789, 991660907, 395055818, 114631168, 592882093, 433662548, 575611502, 85271017, 437758682, 966410075, 5785523, 431760354, 350009095, 922794740, 259861918, 898141704, 138442637, 553962100, 434722279, 47497591, 625115539, 634044499, 625161017, 514343059, 246971990, 436515435, 437161328, 653818172, 46239075, 91969078, 713093081, 120730904, 84619992, 58522387, 643068277, 592867788, 439981478, 7274625, 731912501, 226590019, 535370193, 250029153, 828597311, 226513381, 750710445, 941764408, 878087719, 58970848, 984175395, 242587754, 309249846, 99483235, 44342761, 942658176, 218851495, 478363101, 260800973, 560324450, 641772772, 23789634, 959553515, 243290781, 297864652, 616514118, 943849969, 590770590, 992935664, 250747039, 786098274, 110002165, 38324689, 450944070, 565051599, 200347539, 656433187, 953728182, 433609759, 47257867, 887588877, 236219947, 571449032, 20949972, 655509606, 295738852, 440362771, 745637508, 672403193, 223649378, 436376923, 472346902, 993690817, 819506086, 770197582, 504688933, 385012269, 816572790, 44651306, 142124590, 652328285, 147544983, 776337408, 559520209, 311935074, 916919828, 102801909, 634787344, 679261569, 177554805, 611680123, 690502543, 961970032, 447378184, 482041500, 695174097, 476759448, 135343900, 51907887, 224933761, 935168081, 902415168, 439048480, 941291686, 287953192, 693295752, 391620268, 491034348, 994472219, 638554056, 620818082, 243626466, 528575195, 905351638, 633713826, 40175414, 744142600, 639989195, 626253665, 553004794, 611076728, 708590402, 192440035, 665257954, 43693169, 240916632, 71356607, 252810115, 732654826, 288431402, 280104542, 687597205, 702984397, 793037209, 121166652, 759851314, 338078775, 921421832, 907458341, 304077076, 68477622, 989603932, 426959480, 17097178, 610936713, 459527803, 206397031, 101231939, 636431332, 540323469, 700527413, 766691696, 33603881, 185540414, 966675062, 225454886, 847857454, 54662137, 834610002, 545131017, 438022781, 174478638, 416511681, 130162402, 426494095, 273747596, 796095439, 224931802, 769039376, 991187271, 451905497, 959534268, 775305502, 475479123, 391539918, 952369462, 701661065, 886192294, 450527599, 345873688, 872398612, 656643961, 797293456, 984221330, 789168050, 731650695, 270832724, 604958330, 101346761, 831823949, 200746099, 675425924, 167659634, 458981448, 845451383, 974073735, 425244598, 453365561, 837039866, 302304190, 508209874, 356820323, 504389865, 258478340, 960231539, 854332619, 169473988, 870758166, 838106875, 955554167, 273115099, 723731413, 919942842, 842649519, 981756049, 252363137, 6770228, 799636543, 139659933, 581490430, 80568417, 440305842, 104786500, 278697490, 31655144, 980872088, 468728224, 506620836, 859922018, 436123840, 44380379, 785573886, 47084189, 117643646, 997193844, 858519308, 367250646, 811282662, 144293752, 232661659, 949304829, 900721166, 541591497, 958432922, 357451508, 131296336, 200459355, 992040795, 344527056, 511373189, 714233713, 458359250, 785143574, 854633546, 750934756, 363017172, 72556542, 596061246, 151026780, 313932377, 891574963, 537130049, 294141844, 758745019, 647869329, 881593527, 76616345, 505617396, 86198885, 466358211, 154520587, 608940259, 80955568, 165897099, 538418011, 75531399, 204027876, 15955066, 80424203, 802730818, 198561701, 580332408, 457796336, 832284694, 921042440, 4847156, 31348851, 698228459, 816384470, 52955482, 228916939, 934852295, 265556682, 793891549, 132578627, 429410323, 624716238, 444075054, 490563962, 714714845, 628563778, 565225602, 769025438, 568728336, 112929589, 687617295, 930035375, 30326972, 970156457, 990726990, 549511874, 151352916, 25210578, 9438010, 682716987, 557871851, 340689239, 166850448, 972504337, 762676342, 525258895, 2997773, 464159501, 292360204, 24599237, 904952242, 360692746, 528117800, 21317493, 753842947, 74260790, 857897701, 735030668, 996857923, 945684047, 591690305, 483135402, 551881656, 144716263, 824156250, 966155363, 12156397, 102045600, 601729971, 643238009, 254309867, 92106352, 919410031, 759682851, 526947198, 542257886, 501372820, 438451786, 156156278, 888281922, 84179786, 299671238, 537514466, 994515464, 174632217, 338421924, 697230934, 222125549, 585391406, 353450339, 223562790, 429299776, 873806229, 397111345, 417668776, 254970146, 174323328, 908817458, 327049590, 713455558, 195774590, 584595641, 765284009, 100615857, 32592068, 898988941, 736929566, 996108282, 209528679, 392968997, 43879092, 420313483, 242751904, 774713068, 250192524, 21142877, 103524870, 504826237, 708127047, 766291391, 380207318, 90479847, 730181963, 557056400, 612102702, 970310889, 296631550, 453238400, 759111245, 752080694, 86875912, 692002131, 525741525, 216081842, 889648277, 13368349, 936546313, 794540723, 949618065, 450230918, 674491150, 210513217, 645586665, 182364678, 649362989, 421075286, 397414608, 25706538, 586854415, 396467742, 833546487, 622259917, 121416959, 821594168, 98213586, 328402015, 175381804, 972581874, 650831834, 962851873, 634855139, 861829520, 704583109, 951585894, 237976792, 867369349, 144988368, 831317716, 906751070, 175719607, 506437621, 468546208, 730349482, 741001919, 157718836, 333315797, 63749651, 35242534, 211643342, 488455821, 11143252, 451510441, 322585732, 309255989, 819353800, 250360694, 658914780, 360931021, 206137261, 518276972, 113757276, 61551141, 12209505, 960089950, 408060109, 535431969, 341458599, 173136976, 603724408, 832780534, 6772963, 414531512, 161044332, 581594218, 279569497, 596398014, 28719285, 638760471, 41242737, 218598267, 651358374, 124225703, 891122678, 285020989, 909455120, 276880665, 389568849, 314547905, 363520904, 27984634, 199775442, 697208183, 794218404, 57901229, 690476775, 711469762, 330537790, 64936355, 673955939, 971587125, 596924591, 561610403, 559276216, 563998166, 127325972, 743374851, 396930620, 665231454, 289464461, 61627372, 872983144, 362804598, 710527608, 883865753, 180294675, 915763706, 203048890, 37174936, 175091643, 446599738, 628953846, 660612359, 204817852, 299201076, 526361810, 467500503, 402034838, 203128283, 888015417, 651641357, 540867882, 997964114, 539719316, 462889467, 286122237, 502198577, 511450639, 268639627, 559448180, 520650430, 670274522, 542805108, 493341974, 297009205, 709726821, 739104386, 429215181, 623943425, 155805089, 294148050, 931067172, 398161407, 171957061, 930498834, 417118089, 317967809, 911671559, 567346629, 980251020, 956277961, 264730847, 128622205, 712637982, 26138569, 21146439, 840290591, 269211347, 289661417, 262024572, 905959714, 795566624, 115498241, 789063613, 526306767, 948245404, 650218970, 759186827, 943614082, 424094786, 372865648, 797130728, 841812199, 16718509, 326776882, 194893207, 57130301, 657332571, 534270016, 653268321, 757119638, 89941227, 628132780, 506096718, 451541780);
//    int team_size3 = score3.size();
//    int k3 = 71032;
//    System.out.println("결과 2: " + teamFormation(score3, team_size3, k3)); // 예상 결과: 95

  }
}

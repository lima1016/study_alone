package com.lima.study_alone.codingtest.nexton_20250112;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution5 {

  // 제일 빠름
//  public static long findInterestingPairs(List<Integer> numbers, int targetSum) {
//    HashMap<Integer, Integer> frequencyMap = new HashMap<>();
//    long count = 0;
//
//    for (int num : numbers) {
//      for (int prevNum : frequencyMap.keySet()) {
//        int absDifference = Math.abs(num - prevNum);
//        int absSum = Math.abs(num + prevNum);
//
//        if (absDifference + absSum == targetSum) {
//          count += frequencyMap.get(prevNum); // Add occurrences of prevNum
//        }
//      }
//      frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
//    }
//    return count;
//  }

  // 위에꺼랑 비슷함
//  public static long findInterestingPairs(List<Integer> numbers, int targetValue) {
//    // Frequency map to count occurrences of numbers
//    Map<Integer, Integer> numFrequencyMap = new HashMap<>();
//    long count = 0;
//
//    for (int num : numbers) {
//      // Check if any previously seen numbers form an interesting pair with the current number
//      for (int prevNum : numFrequencyMap.keySet()) {
//        if (calculateAbsSumDifference(num, prevNum) == targetValue) {
//          count += numFrequencyMap.get(prevNum); // Add occurrences of prevNum
//        }
//      }
//      // Add the current number to the frequency map
//      numFrequencyMap.put(num, numFrequencyMap.getOrDefault(num, 0) + 1);
//    }
//    return count;
//  }
//  private static int calculateAbsSumDifference(int num1, int num2) {
//    int absDifference = Math.abs(num1 - num2);
//    int absSum = Math.abs(num1 + num2);
//    return absDifference + absSum;
//  }
  public static long findInterestingPairs(List<Integer> numbers, int targetSum) {
    // frequencyMap을 이용하여 숫자의 등장 빈도를 기록
    Map<Integer, Integer> frequencyMap = new HashMap<>();
    long count = 0;

    // 각 숫자에 대해
    for (int num : numbers) {
      // prevNum과 num이 만족해야 할 조건을 계산
      for (int prevNum : frequencyMap.keySet()) {
        int absDifference = Math.abs(num - prevNum);
        int absSum = Math.abs(num + prevNum);

        // 두 숫자의 차이와 합의 절대값의 합이 targetSum을 만족하는지 확인
        if (absDifference + absSum == targetSum) {
          count += frequencyMap.get(prevNum);
        }
      }

      // num의 빈도를 업데이트
      frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
    }

    return count;
  }

  public static void main(String[] args) {
    // Sample Input
    List<Integer> arr = Arrays.asList(-45161, -102260, 103491, 141610, 113676, 141610, 141610, -28488, 115636, 18915, 141610, 27719, 141610, 62466, 116228, 141610, 121430, -103719, -40488, -27834, 117831, -79648, 37078, -121732, 46089, -141610, -141610, 141610, 8730, 7947, 141610, 50086, 20428, 32735, 62143, -92344, -88078, 141610, 103415, -99438, 13946, -123971, 141610, 141610, 36986, -49474, 141610, 141610, 5446, 17965, -1763, 134876, -141610, -67924, 141610, -23311, 106497, -141610, 111088, -86771, 33355, 76920, 141610, -141610, -141610, -83530, -16706, -30121, 89426, 19527, -123606, -30379, -42141, 141610, 30230, -55423, 141610, -30842, 141610, -48896, -141610, 141610, 4729, 135256, -141610, -116497, 114050, 94376, 89900, 141610, -52242, -103064, -100697, 31528, -7982, 2032, 141610, 120033, 133247, 141610, 4814, 141610, -97861, 129993, -55657, 141610, 131599, 89314, 141610, 117331, -100768, -55332, 46006, -68539, 141610, -75371, -116412, 141610, 141610, 39975, 2702, 72756, -131959, -2293, 141610, 28031, -10968, 141610, -63401, -5142, 117941, -141610, 141610, 141610, 141610, 141610, -35415, -14302, -139914, 69489, 141610, 69249, -121324, 141610, -141610, 131029, -141610, 99692, 123764, -121273, 141610, 141610, -141610, -136358, 136158, -141610, 64852, -31550, 63123, 101366, -18584, -113252, -141610, 141610, 141610, -70022, 141610, 186, -121868, -5381, 106831, 141610, 14011, -59770, -141610, -3810, -84973, -5501, 139493, 15791, 141610, -116086, 57138, -46347, -141610, -6748, 117488, -78508, 141610, 141610, -60316, -63815, 141610, -51794, 111555, 60079, 130129, -141610, 141610, -141610, -81015, 141610, 135314, 66454, -2744, 35388, -141610, 141610, 141610, -44082, 135386, 141610, -123301, 32576, -127580, 41221, -66375, 141610, -12708, 64238, -71562, 141610, -141610, 84743, -114693, 44168, -119198, 141610, -17379, 115699, -106940, 20444, 58351, -18569, -53310, -69570, 120631, -16733, -126587, -55263, 141610, 141610, 80385, 139308, 18610, 141610, -43290, 102480, -15992, 35884, 141610, 121255, -113858, 141610, 131960, -81148, 141610, -141610, 14515, 70787, 89339, 141610, -125422, 136300, -99140, 141610, -66125, 111793, -96339, 141610, -85747, 104178, -81256, 22014, 141610, -56889, 141610, 44452, -26976, 82437, 141610, -71999, -12561, 141610, 69370, 90068, 141610, -141610, -141610, -111448, -33996, -141610, 54981, 52367, 19556, -110133, -1686, -127041, 141610, 141610, -95754, 134289, 110047, 67904, -61753, -85336, 92915, 141610, -118441, 96545, 67874, 141610, 51728, -141610, -117984, 141610, 141610, -44244, -141610, -91992, -70379, -73923, -141610, -99859, -55651, -141610, -141610, 141610, 141610, 5746, -19803, 8862, -76453, -141610, -66604, 6878, 119376, 141610, 141610, 108172, 3311, -50308, 141610, 141610, 141610, -110927, -97393, 78470, 141610, 46434, 128724, -141610, -112508, -89464, 141610, 141610, 141610, -60039, 77514, 141610, 32247, 141610, -15826, 54813, -141610, 137347, -127888, -75787, -107226, 6412, -22059, -89198, -90615, -110905, 17505, 94198, 13979, 28248, 118060, 59171, 39207, -26011, 86947, 141610, 88662, 60049, -141610, 109506, -141610, 141610, -39351, 37469, 141610, -76167, -137792, 141610, -109791, -141610, -15520, -76301, 128204, 101775, 141610, -117928, -28861, -48556, -141610, 32459, 107000, 15767, -103061, 141610, -37814, -141610, 123658, -104813, 141610, 141610, 88880, 141610, 141610, -141610, -26943, -35296, 64793, 132975, 42711, -123706, 76857, 120859, 82640, 40765, -141610, -29928, -141610, -139091, 71205, -1540, 141610, 19420, 141610, -3299, 52432, 141610, 4939, -48721, 136880, 141610, 81283, 91159, 91995, 36218, -141610, 66170, -55684, 386, -137379, -139517, 141610, 141610, -125243, -54944, 10516, 39751, -141610, -55316, 141610, 40148, -1932, 141610, 137084, -53180, -91755, -141610, 141610, 21330, -141610, -141610, 7739, -26310, 97206, -80746, -141610, 141610, 5328, -6325, 141610, 141610, -32121, -52922, -141610, 100206, -141610, -93616, -141610, 122921, -77688, -141610, -36715, 78171, -141610, 141610, 141610, 141610, -80223, -35727, 27438, -48013, 102789, 141610, 141610, 127858, 118638, 62606, -118275, -27509, -9807, -34656, 40410, 115223, -54921, 38575, -3169, 66370, 141610, -141610, -26339, -17452, 41518, 86834, -141610, 141610, 56087, 20000, 93994, -95205, -141610, -60679, 57520, 141610, -93982, -41220, -129242, -53376, -119793, 109023, 141610, 141610, -120039, 141610, -68154, 50704, 141610, 21942, 141610, 141610, -137229, -113124, -65480, -77833, -55368, -141610, -9823, -141610, 141610, -32103, 59530, 141610, -140528, 141610, 141610, -123839, -141610, 141610, -141610, 16387, 68092, 118996, 81815, -141610, 107593, 127570, 141610, 73608, -65127, 38327, -37395, -47811, -107893, 141610, -134385, 86343, -133177, 71822, 141610, 141610, 141610, 109408, -141610, 24761, 141610, 66589, 45809, 141610, -109116, 141610, -78990, -20342, 141610, 68294, -130293, 6094, 36995, -12901, 141610, 141610, 123936, 17969, 141610, 80640, -33129, -127742, 122695, -62617, 116940, 64010, -38109, 141610, -4259, -135999, -103293, 141610, 91508, 118343, 141610, 141610, -141610, -119191, 11596, 74505, -122816, 125167, 44782, -49665, -141610, 141610, -15835, 141610, 1557, 77473, 141610, -57216, 141610, -141610, -77549, 76859, -135525, 17418, 107870, 86380, 77384, 141610, 80660, -65158, 141610, -141610, -33366, 56204, 84015, 141610, -141610, -38055, -91650, 31579, -57416, 31926, -741, -130068, 120511, -141610, -111447, -141610, -112267, -84231, -121564, 141610, 134366, 141610, -74029, 141610, -57930, -39028, -141610, 13361, -101238, -114752, 99566, 131470, -58989, -14133, -115463, 1247, -76244, 89728, 141610, -141610, 141610, 125254, 86780, -141610, 141610, -133249, 141610, 141610, 141610, -84870, -34, -134286, 69776, -16243, 14943, 141610, -18405, 41021, 77068, -66633, -141610, 34551, 117858, 2460, 81482, 56885, 98095, 88784, 91909, 59446, 141610, -76340, -30500, -91678, 108747, 20431, 141610, 141610, 125809, 8424, -97850, 80061, -141610, 141610, -17443, -141610, 25266, 117369, 141610, 141610, 115275, -48961, -121295, 66251, 85946, -141610, 141610, 114825, -41978, -141610, 26333, -127788, 107137, 127177, -140941, 52955, 135902, 112832, -19689, -139241, 141610, 30254, 55110, 90623, 104134, 110156, -26976, -65669, -25823, 118709, 75459, -141610, 134106, -70958, 141610, -141610, 141610, 141610, -98020, -118493, 141610, -40576, 130027, -93556, 141610, 141610, -21676, -112365, 87645, 136234, 40844, -117766, 141610, 141610, 20979, -17190, -90858, -33460, -120930, 15721, -51198, -141610, -141610, 141610, -48709, 108083, 42936, -79832, -16320, 141610, 141610, 78524, 119566, 57299, -116082, 141610, 84732, 74068, 133812, -71702, -76523, 87850, -28717, 141610, -33912, -51108, 54310, 141610, -141610, -115918, -141610, -141610, 54807, 141610, 86600, -61716, -79667, -141610, -34687, 141610, -66873, 141610, 90608, 132933, -141610, -141610, -141610, 88697, -141610, 141610, 141610, -141610, -62470, -6845, -141610, -141610, -102349, 140947, -77833, 141610, 85777, -135967, 42186, 105189, 76282, -53865, 111940, -64827, 141610, -141610, 141610, -58876, -134240, 46890, -141610, 47018, 116986, -141610, -36935, -114210, 24182, -61255, -27719, 71972, 141610, 140140, 80567, -81239, 139220, 1731, -18799, -57109, 134229, 141610, 141610, -141610, 38600, -41806, 767, 3989, -137731, 141610, 58316, -141610, -66891, -58686, 100244, 141610, -141610, 87054, -11363, 141610, -141610, 75411, -141610, 55976, -6783, 4435, -141610, -107332, -128609, 141610, -91491, 73100, 65464, -3715, 56164, 134153, -141610, 112600, 80826, -20600, -5109, -141610, -5714, -60208, 141610, 141610, 67422, 8935, 22735, -84669, -141610, 273, 40215, 87991, -52749, -90017, -475, -113236, 51330, -68083, -36248, 141610, 57447, -70620, 41753, -37828, -77413, 52432, 42653, 141610, 66974, -35590, 141610, 141610, -68072, 95209, 141610, 63193, 141610, 141610, -66590, 10612, -65963, 85849, -86983, 140224, -1573, 94624, -95696, 137352, -101678, -141610, -129299, 87603, -48649, -116096, 73428, 141610, 141610, -39497, -141610, 112430, 128266, -108323, -136920, 32027, 141610, -1791, 141610, -84642, 141610, -141610, 141610, -117950, 134139, -141610, 141610, 67557, -141610, 7515, 135951, -136283, 126636, 141610, -85259, -105860, 141610, 141610, -104959, 123529, 112899, -141610, 141610, -58414, -89387, -33319, 25823, 141610, 132417, -79115, 87637, 53510, -129159, -141610, -26985, -66494, -141610, -141610, 2008, -37259, 39007, -19088, 76018, 119966, 141610, -91316, 141610, 90279, 32748, -141610, 5912, -69142, 20994, -116529, -54728, -59946, 54881, -141610, 43473, 19711, 141610, 82970, -103530, -33758, -34269, 141610, 54855, 141610, 19350, 107034, 92711, -84888, 58959, 115771, 129312, 56031, -9112, 53418, 141610, -132487, -118326, 22091, 59935, 128616, -70637, -91527, 29005, -74009, 141610, -141610, 68781, -41515, 141610, 88533, -141610, -97575, 141610, 141610, -137359, -141610, 141610, -42357, -10064, 128899, 76325, 133239, 112193, 111348, -136312, -54804, -62614, 88964, -141610, 40608, 141610, -141610, -141610, 110070, -81729, 71461, -119505, 117634, -41566, 61151, 141610, -76511, -141610, -24484, 89741, -141610, -10996, -140579, -134470, 141610, -92890, 65228, -138645, 5986, 132685, -127571, -83766, 89027, -121965, 141610, -115349, 141610, 141610, 112044, -101591, 141610, 6949, 38989, 82340, -15531, 27697, 141610, 141610, -49110, -103895, 141610, -141610, 141610, -65686, 77805, 117083, 74758, -1743, 141610, 141610, 141610, -55027, -100412, -129618, -141610, 141610, 141610, -12312, 141610, -70243, 75439, 141610, 141610, -140243, -4272, 91504, -35141, -62813, 141610, 141610, 141610, -96418, 132374, -4223, 56837, 137655, 93201, -141610, -9574, 141610, 141610, 17127, -141610, 28505, 19445, 34974, 141610, -141610, 26687, 65841, -131461, 141610, 141610, 99875, 105062, -31616, -141610, 129244, 26027, -34671, 141610, 141610, 56929, 141610, -94729, -37840, -141610, 141610, -59004, 141610, -71551, 62504, 141610, 56699, 14308, 141610, -61833, 232, -94598, 141610, -129164, -123275, 101293, -4134, -24441, 56405, -141211, 14245, -49767, 41124, 110567, -86436, 141610, -3177, 91722, -31733, -119514, -141610, -89645, 141610, 141610, 48787, 141610, -80621, 38438, 18289, 141610, -15239, -23306, 116459, 119423, 53408, 33249, 33960, 122893, 35967, 141610, -141610, 31635, 283220);
    int sumVal = 283220;

//    List<Integer> arr = Arrays.asList(1, 1, 2, 0);
//    int sumVal = 3;

    // Function Call
    long result = findInterestingPairs(arr, sumVal);

    // Output the result
    System.out.println(result);
  }
}
